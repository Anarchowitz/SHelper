import sys, os, json, webbrowser, requests, datetime, threading
from PIL import Image
from openai import OpenAI
from collections import defaultdict
from datetime import datetime, timedelta
from PySide6.QtWidgets import QAbstractItemView,QScrollArea ,QSpacerItem ,QVBoxLayout ,QSizePolicy ,QLabel, QTableView,QTextEdit ,QApplication, QMainWindow, QStackedWidget, QVBoxLayout, QListView, QPushButton, QWidget, QMessageBox, QHBoxLayout
from PySide6.QtCore import QStringListModel, Qt, QSize,Signal, Slot, QTimer
from PySide6.QtGui import QStandardItemModel, QStandardItem, QIcon, QShortcut, QKeySequence
from info import Ui_InfoWindow
from ai import Ui_AiWindow
from memo import Ui_MemoWindow
from homework import Ui_HMWindow
#shit imports

bug_button_active = False
first_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
last_name = ''

def get_documents_path():
    if os.name == 'nt':  # Windows
        documents_path = os.path.join(os.environ['USERPROFILE'], 'Documents')
    return documents_path
class MainApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("SchoolHelper")
        icon = QIcon()
        icon.addFile("C:/Users/user/Downloads/–≤–∞—Ä–∏–∞–Ω—Ç–∏–∫–æ–Ω–∫–∏1-_1_.ico", QSize(), QIcon.Normal, QIcon.Off) # type: ignore
        self.setWindowIcon(icon)
        self.stacked_widget = QStackedWidget()
        
        self.info_window = InfoWindow()
        self.ai_window = AiWindow()
        self.memo_window = MemoWindow()
        self.hm_window = HMWindow()

        self.stacked_widget.addWidget(self.info_window)
        self.stacked_widget.addWidget(self.ai_window)
        self.stacked_widget.addWidget(self.memo_window)
        self.stacked_widget.addWidget(self.hm_window)
        self.hm_window.update_visibility()

        self.setCentralWidget(self.stacked_widget)


class InfoWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_InfoWindow()
        self.hm_window = HMWindow()
        self.ui.setupUi(self)
        self.ui.label_2.setText(
            """<html><head/><body>
            <p align="center"><span style=" font-size:20pt; font-weight:700;">üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ School Helper! üåü</span></p>
            <p><br/></p>
            <p><span style=" font-size:12pt;">–£–≤–∞–∂–∞–µ–º—ã–µ —É—á–µ–Ω–∏–∫–∏ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏! –ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–∞—à–µ –Ω–æ–≤–æ–µ –¥–µ—Å–∫—Ç–æ–ø-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ 9-11 –∫–ª–∞—Å—Å–æ–≤. School Helper —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –≤ —É—á—ë–±–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–æ–±–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç–∫–∏ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º, –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –∏ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å!</span></p>
            <p><span style=" font-size:12pt;">–° School Helper –≤—ã —Å–º–æ–∂–µ—Ç–µ:</span></p>
            <p><span style=" font-size:12pt;">üìö –õ–µ–≥–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —É—á–µ–±–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ;</span></p>
            <p><span style=" font-size:12pt;">üìù –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º;</span></p>
            <p><span style=" font-size:12pt;">üí¨ –û–±—â–∞—Ç—å—Å—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.</span></p>
            <p>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —Å–¥–µ–ª–∞–π—Ç–µ —É—á—ë–±—É –ø—Ä–æ—â–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ! –í–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º –±–æ–ª—å—à–µ! üí™‚ú®</p>
            </body></html>"""
        )
        self.ui.aiButton.clicked.connect(self.show_ai_window)
        self.ui.memoButton.clicked.connect(self.show_memo_window)
        self.ui.homeworkButton.clicked.connect(self.show_hm_window)
        self.ui.bugButton.clicked.connect(self.toggle_bug_button)

    def show_memo_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.memo_window)

    def show_ai_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.ai_window)
    
    def show_hm_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.hm_window)
    def toggle_bug_button(self):
        global bug_button_active
        bug_button_active = not bug_button_active
        if bug_button_active:
            self.ui.bugButton.setStyleSheet("background-color: green;")
            QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω.")
        else:
            self.ui.bugButton.setStyleSheet("background-color: red;")
            QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω.")


class AiWindow(QMainWindow):
    ai_response_signal = Signal(str)
    def __init__(self):
        super().__init__()
        self.ui = Ui_AiWindow()
        self.ui.setupUi(self)
        self.ui.textEdit.setAcceptRichText(False)
        self.message_layout = QVBoxLayout()
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setFixedHeight(400) 
        self.scroll_area.setWidget(QWidget())
        self.scroll_area.widget().setLayout(self.message_layout)
        self.ui.textBrowser.setLayout(QVBoxLayout())
        self.ui.textBrowser.layout().addWidget(self.scroll_area)

        self.ui.infoButton.clicked.connect(self.show_info_window)
        self.ui.memoButton.clicked.connect(self.show_memo_window)
        self.ui.homeworkButton.clicked.connect(self.show_hm_window)
        self.ui.sendButton.clicked.connect(self.send_message)

        self.shortcut = QShortcut(QKeySequence("Ctrl+Return"), self)
        self.shortcut.activated.connect(self.ui.sendButton.click)
        self.ai_response_signal.connect(self.display_ai_response)

    def show_info_window(self): 
        main_app.stacked_widget.setCurrentWidget(main_app.info_window)

    def show_memo_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.memo_window)

    def show_hm_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.hm_window)

    def send_message(self):
        user_message = self.ui.textEdit.toPlainText()
        self.display_message(user_message)
        self.ui.textEdit.clear()
        self.display_message("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º", is_ai=True)
        self.thinking_message_container = self.message_layout.itemAt(self.message_layout.count() - 1).widget()
        self.thinking_message = self.thinking_message_container.findChild(QTextEdit)
        self.thinking_message.setText("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º") # type: ignore
        self.thinking_dots = 0
        self.thinking_timer = QTimer()
        self.thinking_timer.timeout.connect(self.update_thinking_dots)
        self.thinking_timer.start(300)  # 500 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 0,5 —Å–µ–∫—É–Ω–¥—ã
        threading.Thread(target=self.get_ai_response_async, args=(user_message,)).start()

    def update_thinking_dots(self):
        self.thinking_dots += 1
        if self.thinking_dots == 1:
            self.thinking_message.setText("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º") # type: ignore
        elif self.thinking_dots > 1:
            dots = "." * (self.thinking_dots - 1)
            self.thinking_message.setText("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º" + dots) # type: ignore
        if self.thinking_dots > 3:
            self.thinking_dots = 0

    def get_ai_response_async(self, user_message):
        ai_response = self.get_ai_response(user_message)
        self.ai_response_signal.emit(ai_response)
        self.thinking_timer.stop()

    @Slot(str)
    def display_ai_response(self, ai_response):
        self.message_layout.removeWidget(self.thinking_message_container)
        self.thinking_message_container.deleteLater()
        self.display_message(ai_response, is_ai=True)

    def get_ai_response(self, user_message):
        api_key = "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"  # –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫ —Å–≤–æ–π –∞–ø–∏ –∫–ª—é—á –æ—Ç—Å—é–¥–∞ https://openrouter.ai/settings/keys
        model = "deepseek/deepseek-r1"

        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "model": model,
            "messages": [{"role": "user", "content": user_message}],
            "stream": True
        }

        with requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data,
            stream=True
        ) as response:
            if response.status_code != 200:
                print("–û—à–∏–±–∫–∞ API:", response.status_code)
                return ""

            full_response = []

            for chunk in response.iter_lines():
                if chunk:
                    chunk_str = chunk.decode('utf-8').replace('data: ', '')
                    try:
                        chunk_json = json.loads(chunk_str)
                        if "choices" in chunk_json:
                            content = chunk_json["choices"][0]["delta"].get("content", "")
                            if content:
                                cleaned = content.replace('<think>', '').replace('</think>', '')
                                full_response.append(cleaned)
                    except:
                        pass

            return ''.join(full_response)
        

    def display_message(self, message, is_ai=False):
        message_container = QWidget()
        message_container.setMinimumHeight(100)
        message_layout = QVBoxLayout(message_container)
        message_layout.setContentsMargins(0, 0, 0, 0)
        sender_time_label = QLabel()
        if is_ai:
            sender_time_label.setText("–£–º–Ω—ã–π –¥—Ä—É–≥ - " + datetime.now().strftime("%H:%M"))
        else:
            sender_time_label.setText(f"{first_name} {last_name} - " + datetime.now().strftime("%H:%M"))
        sender_time_label.setStyleSheet("font-size: 12px; color: #666666;")
        message_layout.addWidget(sender_time_label, alignment=Qt.AlignLeft if is_ai else Qt.AlignRight) # type: ignore
        message_text = QTextEdit()
        message_text.setReadOnly(True)
        message_text.setText(message)
        if is_ai:
            message_text.setStyleSheet("background-color: #212121; color: white; border-radius: 10px; padding: 5px;")
        else:
            message_text.setStyleSheet("background-color: #8593fe; color: white; border-radius: 10px; padding: 5px;")
        message_layout.addWidget(message_text)
        self.message_layout.addWidget(message_container, alignment=Qt.AlignTop | (Qt.AlignLeft if is_ai else Qt.AlignRight)) # type: ignore
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.verticalScrollBar().setValue(self.scroll_area.verticalScrollBar().maximum())
        QApplication.processEvents()
        self.scroll_area.verticalScrollBar().setValue(self.scroll_area.verticalScrollBar().maximum())
        message_text.setFixedWidth(400)
        message_text.setFixedHeight(message_text.document().size().height() + 20) # type: ignore
        message_container.setFixedWidth(420)
        message_container.setFixedHeight(message_text.height() + 20)


class MemoWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MemoWindow()
        self.ui.setupUi(self)
        self.ui.listView.setStyleSheet("""
    QListView {
        color: #8593fe;          /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */  /* –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã */
    }
    QListView::item {
        padding: 10px;               /* –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
    }
    QListView::item:selected {
        background-color: #9785ff;   /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
        color: white;                 /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
        border:3px;
	    border-radius:10px;
    }
""")
        self.hm_window = HMWindow()
        self.ui.infoButton.clicked.connect(self.show_info_window)
        self.ui.aiButton.clicked.connect(self.show_ai_window)
        self.ui.homeworkButton.clicked.connect(self.show_hm_window)

        self.class_model = self.create_class_model()
        self.ui.listView.setModel(self.class_model)

        self.subject_model = QStringListModel()

        self.ui.listView.clicked.connect(self.on_class_selected)
        self.selected_class = None
        #—Ç–µ–º—ã
        self.algebra_functions = {
            #11–∫–ª–∞—Å—Å
            "–¢—Ä–∏–Ω–æ–≥–æ–º–µ—Ç—Ä–∏—è": self.algebra_trigonometrya11,
            "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞": self.algebra_chisla11,
            "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã": self.algebra_integral11,
            "–ë–∏–Ω–æ–º –ù—å—é—Ç–æ–Ω–∞": self.algebra_binomnewton11,
            #10–∫–ª–∞—Å—Å
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏": self.algebra_stepeni10,
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞": self.algebra_neravenstva10,
            "–õ–æ–≥–∞—Ä–∏—Ñ–º—ã": self.algebra_logarythm10,
            "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è": self.algebra_trigonometry10,
            "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è": self.algebra_prouzvodnaya10,
            #9–∫–ª–∞—Å—Å
            "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è": self.algebra_kvadrat9,
            "–ì—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π": self.algebra_grafiki9,
            "–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏": self.algebra_trexchlen9,
            "–°–≤–æ–π—Å—Ç–≤–∞ –∫–æ—Ä–Ω–µ–π": self.algebra_korni9,
            "–°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç–µ–ø–µ–Ω–µ–π": self.algebra_stepeni9,
        }
        self.geometry_functions = {
            #11–∫–ª–∞—Å—Å
            "–û–±—ä—ë–º—ã —Ç–µ–ª": self.geometry_obemtel11,
            "–ú–µ—Ç–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ": self.geometry_coords11,
            "–¢–µ–ª–∞ –≤—Ä–∞—â–µ–Ω–∏—è": self.geometry_tela11,
            #10–∫–ª–∞—Å—Å
            "–ü—Ä—è–º—ã–µ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä—è–º—ã—Ö –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π": self.geometry_prostranstvo10,
            "–ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä—è–º—ã—Ö –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π": self.geometry_perpedikularonst10,
            "–£–≥–ª—ã –º–µ–∂–¥—É –ø—Ä—è–º—ã–º–∏ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç—è–º–∏": self.geometry_mnogogran10,
            "–ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∏/–û–±—ä–µ–º—ã –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–æ–≤": self.geometry_mnogogran10,
            #9–∫–ª–∞—Å—Å
            "–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞": self.geometry_pifagor9,
            "–ü–ª–æ—â–∞–¥–∏ —Ñ–∏–≥—É—Ä": self.geometry_ploshadi9,
            "–¢–µ–æ—Ä–µ–º–∞ —Å–∏–Ω—É—Å–æ–≤/–∫–æ—Å–∏–Ω—É—Å–æ–≤/–ì–µ—Ä–æ–Ω–∞": self.geometry_teoremi9,   
            "–°–≤–æ–π—Å—Ç–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤": self.geometry_svoystva9,
        }
        self.statistica_functions = {
            #11–∫–ª–∞—Å—Å
            #–ø–æ–≤—Ç–æ—Ä—è–µ—Ç 10 - –Ω–µ—Ç—É –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ
            #10–∫–ª–∞—Å—Å
            "–°–ª—É—á–∞–π–Ω—ã–µ –æ–ø—ã—Ç—ã –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ–ø—ã—Ç—ã —Å —Ä–∞–≤–Ω–æ–≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–º–∏ –∏—Å—Ö–æ–¥–∞–º–∏": self.statistica_opiti10,
            "–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Å–æ–±—ã—Ç–∏—è–º–∏, —Å–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π": self.statistica_operations10,
            "–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∏": self.statistica_combinatorika10,
            "–°–µ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π/–ë–µ—Ä–Ω—É–ª–ª–∏": self.statistica_bernulli10,
            "–°–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è": self.statistica_raspredelenie10,
            #9–∫–ª–∞—Å—Å
            "–§–æ—Ä–º—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏": self.statistica_formula9,
            "–ò–≥—Ä–∞–ª—å–Ω–∞—è –∫–æ—Å—Ç—å": self.statistica_kybik9,
            "–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π": self.statistica_veroyatnost9,
        }
        topics = ["–ù–∞–∑–∞–¥", "", "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∏ –≤–æ–ª–Ω—ã", "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞", "–ó–∞–∫–æ–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞", "–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∏–Ω–¥—É–∫—Ü–∏—è"]
        self.physics_functions = {
            #11–∫–ª–∞—Å—Å
            "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∏ –≤–æ–ª–Ω—ã": self.physics_kolebanya11,
            "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞": self.physics_molekylar11,
            "–ó–∞–∫–æ–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞": self.physics_postoyanitok11,
            "–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∏–Ω–¥—É–∫—Ü–∏—è": self.physics_induction11,
            #10–∫–ª–∞—Å—Å
            "–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞": self.physics_cinematic10,
            "–î–∏–Ω–∞–º–∏–∫–∞": self.physics_dinamic10,
            "–°—Ç–∞—Ç–∏–∫–∞ —Ç–≤—ë—Ä–¥–æ–≥–æ —Ç–µ–ª–∞": self.physics_tverdoetelo10,
            "–ó–∞–∫–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º–µ—Ö–∞–Ω–∏–∫–µ": self.physics_soxranenie10,
            "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ": self.physics_electropole10,
            "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–æ–∫": self.physics_tok10,
            #9–∫–ª–∞—Å—Å
            "–ó–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞": self.physics_newton9,
            "–î–≤–∏–∂–µ–Ω–∏—è —Ç–µ–ª–∞": self.physics_telo9,
            "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞": self.physics_energy9,
            "–°–≤–µ—Ç–æ–≤—ã–µ —è–≤–ª–µ–Ω–∏—è": self.physics_svet9,
            "–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –≤–æ–ª–Ω—ã": self.physics_elektro9,
        }

    def create_class_model(self):
        classes = ["11 –∫–ª–∞—Å—Å", "10 –∫–ª–∞—Å—Å", "9 –∫–ª–∞—Å—Å"]
        return QStringListModel(classes)

    def on_class_selected(self, index):
        self.selected_class = index.data()
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {self.selected_class}")

        subjects = []

        if self.selected_class == "11 –∫–ª–∞—Å—Å":
            subjects = ["–ù–∞–∑–∞–¥", "", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∏–∫–∞", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
        elif self.selected_class == "10 –∫–ª–∞—Å—Å":
            subjects = ["–ù–∞–∑–∞–¥", "", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∏–∫–∞", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
        elif self.selected_class == "9 –∫–ª–∞—Å—Å":
            subjects = ["–ù–∞–∑–∞–¥", "", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∏–∫–∞", "–¢–µ–æ—Ä–∏—è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"]

        self.subject_model.setStringList(subjects)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.on_subject_selected)

    def on_subject_selected(self, index):
        selected_subject = index.data()

        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {selected_subject}, –ö–ª–∞—Å—Å: {self.selected_class}")

        if selected_subject == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
            return
        if self.selected_class == "11 –∫–ª–∞—Å—Å":            
            if selected_subject == "–ê–ª–≥–µ–±—Ä–∞":
                self.algebra_list11()
            elif selected_subject == "–ì–µ–æ–º–µ—Ç—Ä–∏—è":
                self.geometry_list11()
            elif selected_subject == "–§–∏–∑–∏–∫–∞":
                self.physics_list11()
            elif selected_subject == "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                self.statistica_list11()
        elif self.selected_class == "10 –∫–ª–∞—Å—Å":
            if selected_subject == "–ê–ª–≥–µ–±—Ä–∞":
                self.algebra_list10()
            elif selected_subject == "–ì–µ–æ–º–µ—Ç—Ä–∏—è":
                self.geometry_list10()
            elif selected_subject == "–§–∏–∑–∏–∫–∞":
                self.physics_list10()
            elif selected_subject == "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                self.statistica_list10()
        elif self.selected_class == "9 –∫–ª–∞—Å—Å":            
            if selected_subject == "–ê–ª–≥–µ–±—Ä–∞":
                self.algebra_list9()
            elif selected_subject == "–ì–µ–æ–º–µ—Ç—Ä–∏—è":
                self.geometry_list9()
            elif selected_subject == "–§–∏–∑–∏–∫–∞":
                self.physics_list9()
            elif selected_subject == "–¢–µ–æ—Ä–∏—è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏":
                self.statistica_list9()
        else:
            if not selected_subject:
                return
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
    #11–∫–ª–∞—Å—Å–ª–∞–≥–µ–±—Ä–∞
    def algebra_list11(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–¢—Ä–∏–Ω–æ–≥–æ–º–µ—Ç—Ä–∏—è", "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞", "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã", "–ë–∏–Ω–æ–º –ù—å—é—Ç–æ–Ω–∞"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.algebra_theme11)

    def algebra_theme11(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.algebra_functions[selected_topic]()

    def algebra_trigonometrya11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra11', '1.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_chisla11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra11', '2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_integral11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra11', '3.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_binomnewton11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra11', '4.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    #10–∫–ª–∞—Å—Å–∞–ª–≥–µ–±—Ä–∞
    def algebra_list10(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞", "–õ–æ–≥–∞—Ä–∏—Ñ–º—ã", "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.algebra_theme10)

    def algebra_theme10(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.algebra_functions[selected_topic]()

    def algebra_stepeni10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'stepeni.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_neravenstva10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'neravenstva.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_logarythm10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'logarythm.jpg')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_trigonometry10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'trigonometry.jpg')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_prouzvodnaya10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'prouzvodnaya.png')
        image_path2 = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'prouzvodnaya2.png')
        try:
            img = Image.open(image_path)
            img2 = Image.open(image_path2)
            img.show()
            img2.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    #9–∫–ª–∞—Å—Å–∞–ª–≥–µ–±—Ä–∞
    def algebra_list9(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", "–ì—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π", "–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏", "–°–≤–æ–π—Å—Ç–≤–∞ –∫–æ—Ä–Ω–µ–π", "–°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç–µ–ø–µ–Ω–µ–π"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.algebra_theme10)

    def algebra_theme9(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.algebra_functions[selected_topic]()

    def algebra_kvadrat9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra9', 'kvadrat.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_grafiki9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra9', 'grafiki.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_trexchlen9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra9', 'trexchlen.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_korni9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra9', 'korni.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_stepeni9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra9', 'stepeni.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    #11–∫–ª–∞—Å—Å–≥–µ–æ–º–µ—Ç—Ä–∏—è
    def geometry_list11(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–û–±—ä—ë–º—ã —Ç–µ–ª", "–ú–µ—Ç–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ", "–¢–µ–ª–∞ –≤—Ä–∞—â–µ–Ω–∏—è"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.geometry_theme11)

    def geometry_theme11(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.geometry_functions[selected_topic]()

    def geometry_obemtel11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry11', '1.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_coords11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry11', '2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_tela11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry11', '3.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    #10–∫–ª–∞—Å—Å–≥–µ–æ–º–µ—Ç—Ä–∏—è
    def geometry_list10(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–ü—Ä—è–º—ã–µ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä—è–º—ã—Ö –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π", "–ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä—è–º—ã—Ö –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π", "–£–≥–ª—ã –º–µ–∂–¥—É –ø—Ä—è–º—ã–º–∏ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç—è–º–∏", "–ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∏/–û–±—ä–µ–º—ã –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–æ–≤"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.geometry_theme10)

    def geometry_theme10(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.geometry_functions[selected_topic]()


    def geometry_perpedikularonst10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry10', '1.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_prostranstvo10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry10', '2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_mnogogran10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry10', '3.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    #9–∫–ª–∞—Å—Å–≥–µ–æ–º–µ—Ç—Ä–∏—è
    def geometry_list9(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞", "–ü–ª–æ—â–∞–¥–∏ —Ñ–∏–≥—É—Ä", "–¢–µ–æ—Ä–µ–º–∞ —Å–∏–Ω—É—Å–æ–≤/–∫–æ—Å–∏–Ω—É—Å–æ–≤/–ì–µ—Ä–æ–Ω–∞", "–°–≤–æ–π—Å—Ç–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.geometry_theme10)

    def geometry_theme9(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.geometry_functions[selected_topic]()

    def geometry_pifagor9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry9', 'pifagor.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_teoremi9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry9', 'teoremi.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_ploshadi9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry9', 'ploshadi.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_svoystva9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry9', 'svoystva.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    #11–∫–ª–∞—Å—Å—Ç–µ—Ä–≤–µ—Ä
    def statistica_list11(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–°–ª—É—á–∞–π–Ω—ã–µ –æ–ø—ã—Ç—ã –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ–ø—ã—Ç—ã —Å —Ä–∞–≤–Ω–æ–≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–º–∏ –∏—Å—Ö–æ–¥–∞–º–∏", "–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Å–æ–±—ã—Ç–∏—è–º–∏, —Å–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", "–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∏", "–°–µ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π/–ë–µ—Ä–Ω—É–ª–ª–∏", "–°–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.statistica_theme11)

    def statistica_theme11(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.statistica_functions[selected_topic]()

    #10–∫–ª–∞—Å—Å—Ç–µ—Ä–≤–µ—Ä
    def statistica_list10(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–°–ª—É—á–∞–π–Ω—ã–µ –æ–ø—ã—Ç—ã –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ–ø—ã—Ç—ã —Å —Ä–∞–≤–Ω–æ–≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–º–∏ –∏—Å—Ö–æ–¥–∞–º–∏", "–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Å–æ–±—ã—Ç–∏—è–º–∏, —Å–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", "–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∏", "–°–µ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π/–ë–µ—Ä–Ω—É–ª–ª–∏", "–°–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.statistica_theme10)
    
    def statistica_theme10(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.statistica_functions[selected_topic]()
    def statistica_opiti10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '1.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_operations10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_combinatorika10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '3.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_bernulli10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '4.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_raspredelenie10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '5.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    #9–∫–ª–∞—Å—Å—Ç–µ—Ä–≤–µ—Ä
    def statistica_list9(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–§–æ—Ä–º—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏", "–ò–≥—Ä–∞–ª—å–Ω–∞—è –∫–æ—Å—Ç—å", "–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.statistica_theme10)

    def statistica_theme9(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.statistica_functions[selected_topic]()

    def statistica_formula9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica9', '123.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_kybik9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica9', 'kybik.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_veroyatnost9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica9', 'veroyatnost2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    #11–∫–ª–∞—Å—Å—Ñ–∏–∑–∏–∫–∞
    def physics_list11(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∏ –≤–æ–ª–Ω—ã", "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞", "–ó–∞–∫–æ–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞", "–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∏–Ω–¥—É–∫—Ü–∏—è"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.physics_theme11)

    def physics_theme11(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.physics_functions[selected_topic]()

    def physics_kolebanya11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics11', '1.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_molekylar11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics11', '2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_postoyanitok11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics11', '3.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_induction11(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics11', '4.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    #10–∫–ª–∞—Å—Å—Ñ–∏–∑–∏–∫–∞
    def physics_list10(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞", "–î–∏–Ω–∞–º–∏–∫–∞", "–°—Ç–∞—Ç–∏–∫–∞ —Ç–≤—ë—Ä–¥–æ–≥–æ —Ç–µ–ª–∞", "–ó–∞–∫–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º–µ—Ö–∞–Ω–∏–∫–µ", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–æ–∫"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.physics_theme10)

    def physics_theme10(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.physics_functions[selected_topic]()

    def physics_cinematic10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '1.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_dinamic10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_tverdoetelo10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '3.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_soxranenie10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '4.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_electropole10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '5.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_tok10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '6.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    #9–∫–ª–∞—Å—Å—Ñ–∏–∑–∏–∫–∞
    def physics_list9(self):
        topics = ["–ù–∞–∑–∞–¥", "", "–ó–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞", "–î–≤–∏–∂–µ–Ω–∏—è —Ç–µ–ª–∞", "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞", "–°–≤–µ—Ç–æ–≤—ã–µ —è–≤–ª–µ–Ω–∏—è", "–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –≤–æ–ª–Ω—ã"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.physics_theme10)

    def physics_theme9(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        else:
            self.physics_functions[selected_topic]()

    def physics_newton9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics9', 'newton.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_telo9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics9', 'telo.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_energy9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics9', 'energy.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_svet9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics9', 'svet.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_elektro9(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics9', 'elektro1.png')
        image_path2 = os.path.join(current_path, 'SHelper', 'memos', 'physics9', 'elektro2.png')
        try:
            img = Image.open(image_path)
            img2 = Image.open(image_path2)
            img.show()
            img2.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def show_info_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.info_window)
    def show_ai_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.ai_window)
    def show_hm_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.hm_window)



class HMWindow(QMainWindow, Ui_HMWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_HMWindow()
        self.ui.setupUi(self)
        self.student_id = None
        self.homeworks_by_date = defaultdict(list)
        self.current_date = datetime.now()


        self.ui.nextweekButton.clicked.connect(self.next_week)
        self.ui.lastweekButton.clicked.connect(self.last_week)

        self.ui.saveButton.clicked.connect(self.save_token)
        self.ui.tokenButton.clicked.connect(self.token_button)
        self.ui.updateButton.clicked.connect(self.update_table)
        
        self.ui.memoButton.clicked.connect(self.show_memo_window)
        self.ui.infoButton.clicked.connect(self.show_info_window)
        self.ui.aiButton.clicked.connect(self.show_ai_window)


    def next_week(self):
        self.current_date += timedelta(days=7)
        self.homeworkcheck()
        self.populate_table()
    def last_week(self):
        self.current_date -= timedelta(days=7)
        self.homeworkcheck()
        self.populate_table()
    def token_button(self):
        webbrowser.open('https://school.mos.ru/?backUrl=https%3A%2F%2Fschool.mos.ru%2Fv2%2Ftoken%2Frefresh')

    def load_settings(self):
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        documents_path = get_documents_path()
        settings_path = os.path.join(documents_path, 'SchoolHelper', 'SchoolHelper_settings.json')
        if not os.path.exists(settings_path):
            os.makedirs(os.path.dirname(settings_path), exist_ok=True)
            with open(settings_path, 'w') as f:
                json.dump({}, f)

        try:
            with open(settings_path, 'r') as f:
                self.settings = json.load(f)
                self.token_mesh = self.settings.get('token_mesh', '')
                self.ui.lineEdit.setText(self.token_mesh)
        except Exception as e:
            self.token_mesh = ''
            self.settings = {}

    def save_token(self):
        token = self.ui.lineEdit.text()
        settings = {'token_mesh': token}
        documents_path = get_documents_path()
        settings_path = os.path.join(documents_path, 'SchoolHelper', 'SchoolHelper_settings.json')
        settings_dir = os.path.dirname(settings_path)
        if not os.path.exists(settings_dir):
            os.makedirs(settings_dir)
        
        with open(settings_path, 'w') as f:
            json.dump(settings, f)
        if token == '':
            QMessageBox.warning(self, "School Helper", "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        else:
            QMessageBox.information(self, "School Helper", "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        self.update_visibility()

    def update_visibility(self):
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏...")
        self.load_settings()
        if self.token_mesh.startswith("eyJhbG"):
            self.ui.label_2.setVisible(False)
            self.ui.lineEdit.setVisible(False)
            self.ui.tokenButton.setVisible(False)
            self.ui.saveButton.setVisible(False)
            self.ui.updateButton.setVisible(True)
            self.ui.tableView.setVisible(True)
            self.ui.lastweekButton.setVisible(True)
            self.ui.nextweekButton.setVisible(True)
            self.ui.label_3.setVisible(True)
            self.profilecheck()
            self.homeworkcheck()
            self.populate_table()
        else:
            self.ui.label_2.setVisible(True)
            self.ui.lineEdit.setVisible(True)
            self.ui.tokenButton.setVisible(True)
            self.ui.saveButton.setVisible(True)
            self.ui.updateButton.setVisible(False)
            self.ui.tableView.setVisible(False)
            self.ui.lastweekButton.setVisible(False)
            self.ui.nextweekButton.setVisible(False)
            self.ui.label_3.setVisible(False)

    def update_table(self):
        self.homeworks_by_date.clear()
        self.homeworkcheck()
        self.populate_table()
        
    def profilecheck(self):
        url = "https://school.mos.ru/api/family/mobile/v1/profile"
        headers = {
            "x-mes-subsystem": "familymp",
            "Authorization": f"Bearer {self.token_mesh}"
        }

        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data2 = response.json()
            if 'profile' in data2 and 'id' in data2['profile']:
                student_id = data2['profile']['id']
                print(f"Student-ID: {student_id}")
                global first_name, last_name
                first_name = data2['profile']['first_name']
                last_name = data2['profile']['last_name']
                print(first_name+' '+last_name)
                self.student_id  = student_id
            else:
                if bug_button_active:
                    QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "Student-ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif response.status_code == 401:
            self.reset_token()  # –°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ 401
        else:
            if bug_button_active:
                QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", f"Error: {response.status_code} - {response.text}")
    
    def homeworkcheck(self):
        today = self.current_date
        start_of_week = today - timedelta(days=today.weekday())
        end_of_week = start_of_week + timedelta(days=6)

        start_date_str = start_of_week.strftime('%Y-%m-%d')
        end_date_str = end_of_week.strftime('%Y-%m-%d')
        self.ui.label_3.setText(f'<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:700;\">c {start_date_str} \u043f\u043e {end_date_str}</span></p></body></html>')

        url = f"https://school.mos.ru/api/family/web/v1/homeworks?from={start_date_str}&to={end_date_str}&student_id={self.student_id}"
        headers = {
            "x-mes-subsystem": "familyweb",
            "Authorization": f"Bearer {self.token_mesh}"
        }

        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()

            self.homeworks_by_date.clear()
            for homework in data['payload']:
                date_str = homework['date']
                date = datetime.strptime(date_str, '%Y-%m-%d').date()
                self.homeworks_by_date[date].append(homework)
        elif response.status_code == 401:
            self.reset_token()
        else:
            if bug_button_active:
                QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", f"Error: {response.status_code} - {response.text}")
    def reset_token(self):
        self.token_mesh = ''
        self.settings['token_mesh'] = ''
        with open('settings.json', 'w') as f:
            json.dump(self.settings, f)
        QMessageBox.warning(self, "School Helper", "–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
        self.update_visibility()
    def populate_table(self):
        model = QStandardItemModel()
        model.setHorizontalHeaderLabels(["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–ü—Ä–µ–¥–º–µ—Ç", "–ó–∞–¥–∞–Ω–∏–µ"])
        days_of_week = {
            0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            1: "–í—Ç–æ—Ä–Ω–∏–∫",
            2: "–°—Ä–µ–¥–∞",
            3: "–ß–µ—Ç–≤–µ—Ä–≥",
            4: "–ü—è—Ç–Ω–∏—Ü–∞",
            5: "–°—É–±–±–æ—Ç–∞",
            6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        sorted_dates = sorted(self.homeworks_by_date.keys())

        if not sorted_dates:
            model.appendRow([QStandardItem("–ù–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é")])
        else:
            for date in sorted_dates:
                day_of_week_number = date.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                day_of_week = days_of_week[day_of_week_number]
                has_homework = False

                for homework in self.homeworks_by_date[date]:
                    if homework['homework'].strip() and homework['homework'] != ". ":
                        has_homework = True
                        homework_text = homework['homework']
                        row = [
                            QStandardItem(day_of_week),
                            QStandardItem(homework['subject_name']),
                            QStandardItem(homework_text),
                        ]
                        model.appendRow(row)

                if not has_homework and date == sorted_dates[-1]:
                    model.appendRow([QStandardItem("–ù–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é")])

        self.ui.tableView.setModel(model)
        self.ui.tableView.setWordWrap(True)
        self.ui.tableView.resizeColumnsToContents()


    def show_info_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.info_window)
    def show_ai_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.ai_window)
    def show_memo_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.memo_window)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_app = MainApp()
    main_app.show()
    sys.exit(app.exec())