import sys, os, json, webbrowser, requests, datetime
from PIL import Image

from openai import OpenAI

from collections import defaultdict
from datetime import datetime, timedelta

from PySide6.QtWidgets import QAbstractItemView,QScrollArea ,QSpacerItem ,QVBoxLayout ,QSizePolicy ,QLabel, QTableView,QTextEdit ,QApplication, QMainWindow, QStackedWidget, QVBoxLayout, QListView, QPushButton, QWidget, QMessageBox, QHBoxLayout
from PySide6.QtCore import QStringListModel, Qt, QSize
from PySide6.QtGui import QStandardItemModel, QStandardItem, QIcon

from info import Ui_InfoWindow
from ai import Ui_AiWindow
from memo import Ui_MemoWindow
from homework import Ui_HMWindow
bug_button_active = False
class MainApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("SchoolHelper")
        icon = QIcon()
        icon.addFile("C:/Users/user/Downloads/–≤–∞—Ä–∏–∞–Ω—Ç–∏–∫–æ–Ω–∫–∏1-_1_.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.setWindowIcon(icon)
        self.stacked_widget = QStackedWidget()
        
        self.info_window = InfoWindow()
        self.ai_window = AiWindow()
        self.memo_window = MemoWindow()
        self.hm_window = HMWindow()

        self.stacked_widget.addWidget(self.info_window)
        self.stacked_widget.addWidget(self.ai_window)
        self.stacked_widget.addWidget(self.memo_window)
        self.stacked_widget.addWidget(self.hm_window)
        self.hm_window.update_visibility()

        self.setCentralWidget(self.stacked_widget)


class InfoWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_InfoWindow()
        self.hm_window = HMWindow()
        self.ui.setupUi(self)
        self.ui.label_2.setText(
            """<html><head/><body>
            <p align="center"><span style=" font-size:20pt; font-weight:700;">üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ School Helper! üåü</span></p>
            <p><br/></p>
            <p><span style=" font-size:12pt;">–£–≤–∞–∂–∞–µ–º—ã–µ —É—á–µ–Ω–∏–∫–∏ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏! –ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–∞—à–µ –Ω–æ–≤–æ–µ –¥–µ—Å–∫—Ç–æ–ø-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ 9-11 –∫–ª–∞—Å—Å–æ–≤. School Helper —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –≤ —É—á—ë–±–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–æ–±–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç–∫–∏ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º, –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –∏ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø–æ–º–æ—â—å!</span></p>
            <p><span style=" font-size:12pt;">–° School Helper –≤—ã —Å–º–æ–∂–µ—Ç–µ:</span></p>
            <p><span style=" font-size:12pt;">üìö –õ–µ–≥–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —É—á–µ–±–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ;</span></p>
            <p><span style=" font-size:12pt;">üìù –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º;</span></p>
            <p><span style=" font-size:12pt;">üí¨ –û–±—â–∞—Ç—å—Å—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.</span></p>
            <p>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —Å–¥–µ–ª–∞–π—Ç–µ —É—á—ë–±—É –ø—Ä–æ—â–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ! –í–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º –±–æ–ª—å—à–µ! üí™‚ú®</p>
            </body></html>"""
        )
        self.ui.aiButton.clicked.connect(self.show_ai_window)
        self.ui.memoButton.clicked.connect(self.show_memo_window)
        self.ui.homeworkButton.clicked.connect(self.show_hm_window)
        self.ui.bugButton.clicked.connect(self.toggle_bug_button)

    def show_memo_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.memo_window)

    def show_ai_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.ai_window)
    
    def show_hm_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.hm_window)
    def toggle_bug_button(self):
        global bug_button_active
        bug_button_active = not bug_button_active
        if bug_button_active:
            self.ui.bugButton.setStyleSheet("background-color: green;")
            QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω.")
        else:
            self.ui.bugButton.setStyleSheet("background-color: red;")
            QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω.")


class AiWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_AiWindow()
        self.ui.setupUi(self)
        self.ui.textEdit.setAcceptRichText(False)
        self.message_layout = QVBoxLayout()
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setFixedHeight(400) 
        self.scroll_area.setWidget(QWidget())
        self.scroll_area.widget().setLayout(self.message_layout)
        self.ui.textBrowser.setLayout(QVBoxLayout())
        self.ui.textBrowser.layout().addWidget(self.scroll_area)

        self.ui.infoButton.clicked.connect(self.show_info_window)
        self.ui.memoButton.clicked.connect(self.show_memo_window)
        self.ui.homeworkButton.clicked.connect(self.show_hm_window)
        self.ui.sendButton.clicked.connect(self.send_message)

    def show_info_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.info_window)

    def show_memo_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.memo_window)

    def show_hm_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.hm_window)

    def send_message(self):
        user_message = self.ui.textEdit.toPlainText()
        self.display_message(user_message)
        self.ui.textEdit.clear()
        ai_response = "–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..."
        self.display_message(ai_response, is_ai=True)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setMinimumHeight(300)
        self.scroll_area.verticalScrollBar().setValue(self.scroll_area.verticalScrollBar().maximum())
        QApplication.processEvents()
        self.scroll_area.verticalScrollBar().setValue(self.scroll_area.verticalScrollBar().maximum())
        def update_ai_response(response):
            for i in range(self.message_layout.count()):
                widget = self.message_layout.itemAt(i).widget()
                if widget and isinstance(widget, QWidget):
                    for j in range(widget.layout().count()):
                        label = widget.layout().itemAt(j).widget()
                        if label and isinstance(label, QLabel) and label.text() == ai_response:
                            label.setText(response)
        import threading
        threading.Thread(target=lambda: update_ai_response(self.get_ai_response(user_message))).start()

    def display_message(self, message, is_ai=False):
        message_container = QWidget()
        message_container.setMinimumHeight(100)
        message_layout = QVBoxLayout(message_container)
        message_layout.setContentsMargins(0, 0, 0, 0)
        sender_time_label = QLabel()
        if is_ai:
            sender_time_label.setText("AI " + datetime.now().strftime("%H:%M"))
        else:
            sender_time_label.setText("User    " + datetime.now().strftime("%H:%M"))
        sender_time_label.setStyleSheet("font-size: 12px; color: #666666;")
        message_layout.addWidget(sender_time_label, alignment=Qt.AlignLeft if is_ai else Qt.AlignRight)
        message_label = QLabel()
        message_label.setText(message)
        if is_ai:
            message_label.setStyleSheet("background-color: #212121; color: white; border-radius: 10px; padding: 5px;")
        else:
            message_label.setStyleSheet("background-color: #8593fe; color: white; border-radius: 10px; padding: 5px;")
        message_label.setWordWrap(True)
        message_label.adjustSize()
        message_layout.addWidget(message_label)
        self.message_layout.addWidget(message_container, alignment=Qt.AlignTop | (Qt.AlignLeft if is_ai else Qt.AlignRight))
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setMinimumHeight(300)
        self.scroll_area.verticalScrollBar().setValue(self.scroll_area.verticalScrollBar().maximum())
        QApplication.processEvents()
        self.scroll_area.verticalScrollBar().setValue(self.scroll_area.verticalScrollBar().maximum())

    def get_ai_response(self, user_message):
        client = OpenAI(
            api_key="sk-aitunnel-M3c1CcdfxFb2oQWm2WMRpd9BbE88N2R8",
            base_url="https://api.aitunnel.ru/v1/",
        )
        try:
            completion = client.chat.completions.create(
                messages=[{"role": "user", "content": user_message}],
                max_tokens=1025,
                model="gpt-4o-mini"
            )
            if completion and completion.choices:
                if bug_button_active:
                    QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", f"{completion.choices[0]}")
                return completion.choices[0].message.content
            else:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."
        except Exception as e:
            if bug_button_active:
                QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."


class MemoWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MemoWindow()
        self.ui.setupUi(self)
        self.ui.listView.setStyleSheet("""
    QListView {
        color: #8593fe;          /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */  /* –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã */
    }
    QListView::item {
        padding: 10px;               /* –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
    }
    QListView::item:selected {
        background-color: #9785ff;   /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
        color: white;                 /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */
        border:3px;
	    border-radius:10px;
    }
""")
        self.hm_window = HMWindow()
        self.ui.infoButton.clicked.connect(self.show_info_window)
        self.ui.aiButton.clicked.connect(self.show_ai_window)
        self.ui.homeworkButton.clicked.connect(self.show_hm_window)

        self.class_model = self.create_class_model()
        self.ui.listView.setModel(self.class_model)

        self.subject_model = QStringListModel()

        self.ui.listView.clicked.connect(self.on_class_selected)
        self.selected_class = None

    def create_class_model(self):
        classes = ["11 –∫–ª–∞—Å—Å", "10 –∫–ª–∞—Å—Å", "9 –∫–ª–∞—Å—Å"]
        return QStringListModel(classes)

    def on_class_selected(self, index):
        self.selected_class = index.data()
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {self.selected_class}")

        subjects = []

        if self.selected_class == "11 –∫–ª–∞—Å—Å":
            subjects = ["–ù–∞–∑–∞–¥", "", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∏–∫–∞", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
        elif self.selected_class == "10 –∫–ª–∞—Å—Å":
            subjects = ["–ù–∞–∑–∞–¥", "", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∏–∫–∞", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
        elif self.selected_class == "9 –∫–ª–∞—Å—Å":
            subjects = ["–ù–∞–∑–∞–¥", "", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∏–∫–∞", "–¢–µ–æ—Ä–∏—è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"]

        self.subject_model.setStringList(subjects)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.on_subject_selected)

    def on_subject_selected(self, index):
        selected_subject = index.data()

        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {selected_subject}, –ö–ª–∞—Å—Å: {self.selected_class}")

        if selected_subject == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        elif selected_subject == "–ê–ª–≥–µ–±—Ä–∞" and self.selected_class == "10 –∫–ª–∞—Å—Å":
            print("–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ–º –ø–æ –∞–ª–≥–µ–±—Ä–µ")
            self.algebra_list10()
        elif selected_subject == "–ì–µ–æ–º–µ—Ç—Ä–∏—è":
            self.geometry_list10()
        elif selected_subject == "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            self.statistica_list10()
        elif selected_subject == "–§–∏–∑–∏–∫–∞":
            self.physics_list10()
        else:
            if not selected_subject:
                return
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")

    def algebra_list10(self):
        topics = ["–ù–∞–∑–∞–¥","", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞", "–õ–æ–≥–∞—Ä–∏—Ñ–º—ã", "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.algebra_theme10)

    def algebra_theme10(self, index):
        selected_topic = index.data()
        if not selected_topic:  
            return
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        elif selected_topic == "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏":
            self.algebra_stepeni10()
        elif selected_topic == "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞":
            self.algebra_neravenstva10()
        elif selected_topic == "–õ–æ–≥–∞—Ä–∏—Ñ–º—ã":
            self.algebra_logarythm10()
        elif selected_topic == "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è":
            self.algebra_trigonometry10()
        elif selected_topic == "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è":
            self.algebra_prouzvodnaya10()
        else:
            QMessageBox.information(self, "–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞", f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {selected_topic}")

    def algebra_stepeni10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'stepeni.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_neravenstva10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'neravenstva.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_logarythm10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'logarythm.jpg')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_trigonometry10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'trigonometry.jpg')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def algebra_prouzvodnaya10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'prouzvodnaya.png')
        image_path2 = os.path.join(current_path, 'SHelper', 'memos', 'algebra10', 'prouzvodnaya2.png')
        try:
            img = Image.open(image_path)
            img2 = Image.open(image_path2)
            img.show()
            img2.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_list10(self):
        topics = ["–ù–∞–∑–∞–¥","", "–ü—Ä—è–º—ã–µ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä—è–º—ã—Ö –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π", "–ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä—è–º—ã—Ö –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π", "–£–≥–ª—ã –º–µ–∂–¥—É –ø—Ä—è–º—ã–º–∏ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç—è–º–∏", "–ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∏/–û–±—ä–µ–º—ã –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–æ–≤"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.geometry_theme10)

    def geometry_theme10(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        elif selected_topic == "–ü—Ä—è–º—ã–µ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä—è–º—ã—Ö –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π":
            self.geometry_prostranstvo10()
        elif selected_topic == "–ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä—è–º—ã—Ö –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π":
            self.geometry_perpedikularonst10()
        elif selected_topic == "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è":
            self.algebra_trigonometry10()
        elif selected_topic == "–£–≥–ª—ã –º–µ–∂–¥—É –ø—Ä—è–º—ã–º–∏ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç—è–º–∏":
            self.algebra_prouzvodnaya10()
        elif selected_topic == "–ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∏/–û–±—ä–µ–º—ã –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–æ–≤":
            self.geometry_mnogogran10()
        else:
            QMessageBox.information(self, "–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞", f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {selected_topic}")
    def geometry_perpedikularonst10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry10', '1.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_prostranstvo10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry10', '2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def geometry_mnogogran10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'geometry10', '3.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    def statistica_list10(self):
        topics = ["–ù–∞–∑–∞–¥","", "–°–ª—É—á–∞–π–Ω—ã–µ –æ–ø—ã—Ç—ã –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ–ø—ã—Ç—ã —Å —Ä–∞–≤–Ω–æ–≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–º–∏ –∏—Å—Ö–æ–¥–∞–º–∏", "–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Å–æ–±—ã—Ç–∏—è–º–∏, —Å–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", "–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∏", "–°–µ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π/–ë–µ—Ä–Ω—É–ª–ª–∏", "–°–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.statistica_theme10)

    def statistica_theme10(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        elif selected_topic == "–°–ª—É—á–∞–π–Ω—ã–µ –æ–ø—ã—Ç—ã –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ–ø—ã—Ç—ã —Å —Ä–∞–≤–Ω–æ–≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–º–∏ –∏—Å—Ö–æ–¥–∞–º–∏":
            self.statistica_opiti10(    )
        elif selected_topic == "–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Å–æ–±—ã—Ç–∏—è–º–∏, —Å–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π":
            self.statistica_operations10()
        elif selected_topic == "–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∏":
            self.statistica_combinatorika10()
        elif selected_topic == "–°–µ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π/–ë–µ—Ä–Ω—É–ª–ª–∏":
            self.statistica_bernulli10()
        elif selected_topic == "–°–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è":
            self.statistica_raspredelenie10()
        else:
            QMessageBox.information(self, "–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞", f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {selected_topic}")
    def statistica_opiti10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '1.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_operations10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_combinatorika10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '3.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_bernulli10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '4.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def statistica_raspredelenie10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'statistica10', '5.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_list10(self):
        topics = ["–ù–∞–∑–∞–¥","", "–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞", "–î–∏–Ω–∞–º–∏–∫–∞", "–°—Ç–∞—Ç–∏–∫–∞ —Ç–≤—ë—Ä–¥–æ–≥–æ —Ç–µ–ª–∞", "–ó–∞–∫–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º–µ—Ö–∞–Ω–∏–∫–µ", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–æ–∫"]
        self.subject_model.setStringList(topics)
        self.ui.listView.setModel(self.subject_model)
        self.ui.listView.clearSelection()

        self.ui.listView.clicked.disconnect()
        self.ui.listView.clicked.connect(self.physics_theme10)

    def physics_theme10(self, index):
        selected_topic = index.data()
        if selected_topic == "–ù–∞–∑–∞–¥":
            self.ui.listView.setModel(self.class_model)
            self.ui.listView.clearSelection()
            self.ui.listView.clicked.disconnect()
            self.ui.listView.clicked.connect(self.on_class_selected)
        elif selected_topic == "–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞":
            self.physics_cinematic10()
        elif selected_topic == "–î–∏–Ω–∞–º–∏–∫–∞":
            self.physics_dinamic10()
        elif selected_topic == "–°—Ç–∞—Ç–∏–∫–∞ —Ç–≤—ë—Ä–¥–æ–≥–æ —Ç–µ–ª–∞":
            self.physics_tverdoetelo10()
        elif selected_topic == "–ó–∞–∫–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º–µ—Ö–∞–Ω–∏–∫–µ":
            self.physics_soxranenie10()
        elif selected_topic == "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ":
            self.physics_electropole10()
        elif selected_topic == "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–æ–∫":
            self.physics_tok10()
        else:
            QMessageBox.information(self, "–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞", f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {selected_topic}")

    def physics_cinematic10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '1.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_dinamic10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '2.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_tverdoetelo10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '3.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_soxranenie10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '4.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_electropole10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '5.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    def physics_tok10(self):
        current_path = os.getcwd()
        image_path = os.path.join(current_path, 'SHelper', 'memos', 'physics10', '6.png')
        try:
            img = Image.open(image_path)
            img.show()
        except FileNotFoundError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


    def show_info_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.info_window)
    def show_ai_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.ai_window)
    def show_hm_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.hm_window)



class HMWindow(QMainWindow, Ui_HMWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_HMWindow()
        self.ui.setupUi(self)
        self.student_id = None
        self.homeworks_by_date = defaultdict(list)
        self.current_date = datetime.now()


        self.ui.nextweekButton.clicked.connect(self.next_week)
        self.ui.lastweekButton.clicked.connect(self.last_week)

        self.ui.saveButton.clicked.connect(self.save_token)
        self.ui.tokenButton.clicked.connect(self.token_button)
        self.ui.updateButton.clicked.connect(self.update_table)
        
        self.ui.memoButton.clicked.connect(self.show_memo_window)
        self.ui.infoButton.clicked.connect(self.show_info_window)
        self.ui.aiButton.clicked.connect(self.show_ai_window)


    def next_week(self):
        self.current_date += timedelta(days=7)
        self.homeworkcheck()
        self.populate_table()
    def last_week(self):
        self.current_date -= timedelta(days=7)
        self.homeworkcheck()
        self.populate_table()
    def token_button(self):
        webbrowser.open('https://school.mos.ru/?backUrl=https%3A%2F%2Fschool.mos.ru%2Fv2%2Ftoken%2Frefresh')
    def load_settings(self):
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        if not os.path.exists('settings.json'):
            with open('settings.json', 'w') as f:
                json.dump({}, f)

        try:
            with open('settings.json', 'r') as f:
                self.settings = json.load(f)
                self.token_mesh = self.settings.get('token_mesh', '')
                self.ui.lineEdit.setText(self.token_mesh)
        except Exception as e:
            self.token_mesh = ''
            self.settings = {}

    def save_token(self):
        token = self.ui.lineEdit.text()
        settings = {'token_mesh': token}
        with open('settings.json', 'w') as f:
            json.dump(settings, f)
        if token == '':
            QMessageBox.warning(self, "School Helper", "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        else:
            QMessageBox.information(self, "School Helper", "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        self.update_visibility()

    def update_visibility(self):
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏...")
        self.load_settings()
        if self.token_mesh.startswith("eyJhbG"):
            self.ui.label_2.setVisible(False)
            self.ui.lineEdit.setVisible(False)
            self.ui.tokenButton.setVisible(False)
            self.ui.saveButton.setVisible(False)
            self.ui.updateButton.setVisible(True)
            self.ui.tableView.setVisible(True)
            self.ui.lastweekButton.setVisible(True)
            self.ui.nextweekButton.setVisible(True)
            self.ui.label_3.setVisible(True)
            self.profilecheck()
            self.homeworkcheck()
            self.populate_table()
        else:
            self.ui.label_2.setVisible(True)
            self.ui.lineEdit.setVisible(True)
            self.ui.tokenButton.setVisible(True)
            self.ui.saveButton.setVisible(True)
            self.ui.updateButton.setVisible(False)
            self.ui.tableView.setVisible(False)
            self.ui.lastweekButton.setVisible(False)
            self.ui.nextweekButton.setVisible(False)
            self.ui.label_3.setVisible(False)

    def update_table(self):
        self.homeworks_by_date.clear()
        self.homeworkcheck()
        self.populate_table()
        
    def profilecheck(self):
        url = "https://school.mos.ru/api/family/mobile/v1/profile"
        headers = {
            "x-mes-subsystem": "familymp",
            "Authorization": f"Bearer {self.token_mesh}"
        }

        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data2 = response.json()
            if 'profile' in data2 and 'id' in data2['profile']:
                student_id = data2['profile']['id']
                print(f"Student-ID: {student_id}")
                self.student_id  = student_id
            else:
                if bug_button_active:
                    QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "Student-ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif response.status_code == 401:
            self.reset_token()  # –°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ 401
        else:
            if bug_button_active:
                QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", f"Error: {response.status_code} - {response.text}")
    
    def homeworkcheck(self):
        today = self.current_date
        start_of_week = today - timedelta(days=today.weekday())
        end_of_week = start_of_week + timedelta(days=6)

        start_date_str = start_of_week.strftime('%Y-%m-%d')
        end_date_str = end_of_week.strftime('%Y-%m-%d')
        self.ui.label_3.setText(f'<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:700;\">c {start_date_str} \u043f\u043e {end_date_str}</span></p></body></html>')

        url = f"https://school.mos.ru/api/family/web/v1/homeworks?from={start_date_str}&to={end_date_str}&student_id={self.student_id}"
        headers = {
            "x-mes-subsystem": "familyweb",
            "Authorization": f"Bearer {self.token_mesh}"
        }

        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()

            self.homeworks_by_date.clear()
            for homework in data['payload']:
                date_str = homework['date']
                date = datetime.strptime(date_str, '%Y-%m-%d').date()
                self.homeworks_by_date[date].append(homework)
        elif response.status_code == 401:
            self.reset_token()
        else:
            if bug_button_active:
                QMessageBox.information(self, "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", f"Error: {response.status_code} - {response.text}")
    def reset_token(self):
        self.token_mesh = ''
        self.settings['token_mesh'] = ''
        with open('settings.json', 'w') as f:
            json.dump(self.settings, f)
        QMessageBox.warning(self, "School Helper", "–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
        self.update_visibility()
    def populate_table(self):
        model = QStandardItemModel()
        model.setHorizontalHeaderLabels(["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–ü—Ä–µ–¥–º–µ—Ç", "–ó–∞–¥–∞–Ω–∏–µ"])
        days_of_week = {
            0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            1: "–í—Ç–æ—Ä–Ω–∏–∫",
            2: "–°—Ä–µ–¥–∞",
            3: "–ß–µ—Ç–≤–µ—Ä–≥",
            4: "–ü—è—Ç–Ω–∏—Ü–∞",
            5: "–°—É–±–±–æ—Ç–∞",
            6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        sorted_dates = sorted(self.homeworks_by_date.keys())

        if not sorted_dates:
            model.appendRow([QStandardItem("–ù–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é")])
        else:
            for date in sorted_dates:
                day_of_week_number = date.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                day_of_week = days_of_week[day_of_week_number]
                has_homework = False

                for homework in self.homeworks_by_date[date]:
                    if homework['homework'].strip() and homework['homework'] != ". ":
                        has_homework = True
                        homework_text = homework['homework']
                        row = [
                            QStandardItem(day_of_week),
                            QStandardItem(homework['subject_name']),
                            QStandardItem(homework_text),
                        ]
                        model.appendRow(row)

                if not has_homework and date == sorted_dates[-1]:
                    model.appendRow([QStandardItem("–ù–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é")])

        self.ui.tableView.setModel(model)
        self.ui.tableView.setWordWrap(True)
        self.ui.tableView.resizeColumnsToContents()


    def show_info_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.info_window)
    def show_ai_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.ai_window)
    def show_memo_window(self):
        main_app.stacked_widget.setCurrentWidget(main_app.memo_window)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_app = MainApp()
    main_app.show()
    sys.exit(app.exec())